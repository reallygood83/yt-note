'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';
import { generateNote } from '@/lib/note-generator-client';

export default function CreateNotePage() {
  const [youtubeUrl, setYoutubeUrl] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [progress, setProgress] = useState(0);
  const [currentStep, setCurrentStep] = useState('');
  const [generatedNote, setGeneratedNote] = useState<any>(null);
  const [error, setError] = useState('');
  const [hasApiKeys, setHasApiKeys] = useState(false);

  useEffect(() => {
    // API 키 확인
    const geminiKey = localStorage.getItem('gemini_api_key');
    const youtubeKey = localStorage.getItem('youtube_api_key');
    setHasApiKeys(!!(geminiKey && youtubeKey));
  }, []);

  const extractVideoId = (url: string) => {
    const regex = /(?:youtube\.com\/(?:[^\/]+\/.+\/|(?:v|e(?:mbed)?)\/|.*[?&]v=)|youtu\.be\/)([^"&?\/\s]{11})/;
    const match = url.match(regex);
    return match ? match[1] : null;
  };

  const handleGenerate = async () => {
    if (!hasApiKeys) {
      alert('API 키를 먼저 설정해주세요.');
      return;
    }

    const videoId = extractVideoId(youtubeUrl);
    if (!videoId) {
      setError('올바른 YouTube URL을 입력해주세요.');
      return;
    }

    setIsGenerating(true);
    setError('');
    setGeneratedNote(null);

    try {
      const geminiApiKey = localStorage.getItem('gemini_api_key')!;
      const youtubeApiKey = localStorage.getItem('youtube_api_key')!;

      const progressCallback = (step: string, percentage: number) => {
        setCurrentStep(step);
        setProgress(percentage);
      };

      const note = await generateNote(videoId, geminiApiKey, youtubeApiKey, progressCallback);
      setGeneratedNote(note);
      
      // 로컬 스토리지에 노트 저장
      const savedNotes = JSON.parse(localStorage.getItem('saved_notes') || '[]');
      const noteWithId = {
        ...note,
        id: Date.now().toString(),
        createdAt: new Date().toISOString(),
        youtubeUrl
      };
      savedNotes.unshift(noteWithId);
      localStorage.setItem('saved_notes', JSON.stringify(savedNotes));
      
    } catch (error: any) {
      setError(error.message || '노트 생성 중 오류가 발생했습니다.');
    }

    setIsGenerating(false);
  };

  const downloadMarkdown = () => {
    if (!generatedNote) return;

    const markdownContent = `# ${generatedNote.title}

**채널:** ${generatedNote.channelTitle}
**영상 길이:** ${generatedNote.duration}
**생성일:** ${new Date().toLocaleDateString('ko-KR')}

## 🎯 핵심 인사이트
${generatedNote.keyInsight}

## 📝 타임스탬프별 정리

${generatedNote.sections?.map((section: any) => `
### 📍 [${section.timeRange}] ${section.title}

**핵심 내용:**
${section.content}

**💡 핵심 개념:** ${section.keyConcepts?.join(', ') || ''}
**⚡ 액션 포인트:** ${section.actionPoints?.join(', ') || ''}

---
`).join('') || ''}

## ✅ 학습 체크리스트

- [ ] 영상 시청 완료
- [ ] 핵심 개념 이해
- [ ] 액션 포인트 실행
- [ ] 복습 완료

---
*Generated by YouTube Learning Note Generator*
`;

    const blob = new Blob([markdownContent], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${generatedNote.title.replace(/[^a-zA-Z0-9가-힣]/g, '_')}.md`;
    a.click();
    URL.revokeObjectURL(url);
  };

  if (!hasApiKeys) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="bg-white rounded-lg shadow-lg p-8 max-w-md text-center">
          <div className="text-6xl mb-4">⚠️</div>
          <h2 className="text-2xl font-bold text-gray-900 mb-4">API 키 설정 필요</h2>
          <p className="text-gray-600 mb-6">
            노트를 생성하기 위해서는 먼저 API 키를 설정해야 합니다.
          </p>
          <Link href="/settings" className="bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg transition-colors">
            설정 페이지로 이동
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="container mx-auto px-4 py-8 max-w-6xl">
        {/* Header */}
        <div className="bg-white rounded-lg shadow-lg p-6 mb-8">
          <div className="flex items-center justify-between mb-4">
            <h1 className="text-3xl font-bold text-gray-900">🎬 노트 생성</h1>
            <div className="space-x-3">
              <Link href="/my-notes" className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg transition-colors">
                내 노트
              </Link>
              <Link href="/" className="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-lg transition-colors">
                홈으로
              </Link>
            </div>
          </div>
          <p className="text-gray-600">
            YouTube URL을 입력하면 AI가 자동으로 학습 노트를 생성해드립니다.
          </p>
        </div>

        {/* URL Input */}
        <div className="bg-white rounded-lg shadow-lg p-6 mb-8">
          <h2 className="text-xl font-bold text-gray-900 mb-4">📎 YouTube URL 입력</h2>
          
          <div className="space-y-4">
            <div>
              <input
                type="url"
                value={youtubeUrl}
                onChange={(e) => setYoutubeUrl(e.target.value)}
                placeholder="https://www.youtube.com/watch?v=..."
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-lg"
                disabled={isGenerating}
              />
            </div>
            
            <button
              onClick={handleGenerate}
              disabled={isGenerating || !youtubeUrl}
              className="bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400 text-white font-bold py-3 px-8 rounded-lg transition-colors"
            >
              {isGenerating ? '생성 중...' : '🚀 노트 생성하기'}
            </button>
          </div>

          {error && (
            <div className="mt-4 bg-red-50 border border-red-200 rounded-lg p-4">
              <div className="flex items-center text-red-700">
                <span className="mr-2">❌</span>
                {error}
              </div>
            </div>
          )}
        </div>

        {/* Progress */}
        {isGenerating && (
          <div className="bg-white rounded-lg shadow-lg p-6 mb-8">
            <h3 className="text-lg font-bold text-gray-900 mb-4">📊 생성 진행률</h3>
            
            <div className="space-y-4">
              <div className="w-full bg-gray-200 rounded-full h-3">
                <div 
                  className="bg-blue-600 h-3 rounded-full transition-all duration-300"
                  style={{ width: `${progress}%` }}
                ></div>
              </div>
              
              <div className="flex items-center text-gray-700">
                <span className="mr-2">⏳</span>
                {currentStep}
              </div>
              
              <div className="text-sm text-gray-500">
                {progress}% 완료 (예상 소요 시간: 15-30초)
              </div>
            </div>
          </div>
        )}

        {/* Generated Note */}
        {generatedNote && (
          <div className="bg-white rounded-lg shadow-lg p-6">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-2xl font-bold text-gray-900">📝 생성된 노트</h2>
              <div className="space-x-3">
                <button
                  onClick={downloadMarkdown}
                  className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg transition-colors"
                >
                  📥 마크다운 다운로드
                </button>
              </div>
            </div>

            {/* Note Header */}
            <div className="border-b pb-6 mb-6">
              <h1 className="text-3xl font-bold text-gray-900 mb-4">{generatedNote.title}</h1>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                <div>
                  <span className="font-semibold text-gray-700">채널:</span> {generatedNote.channelTitle}
                </div>
                <div>
                  <span className="font-semibold text-gray-700">영상 길이:</span> {generatedNote.duration}
                </div>
                <div>
                  <span className="font-semibold text-gray-700">생성일:</span> {new Date().toLocaleDateString('ko-KR')}
                </div>
              </div>
            </div>

            {/* Key Insight */}
            <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-6">
              <h3 className="font-bold text-yellow-800 mb-2">💡 핵심 인사이트</h3>
              <p className="text-yellow-700">{generatedNote.keyInsight}</p>
            </div>

            {/* Sections */}
            <div className="space-y-6">
              <h3 className="text-xl font-bold text-gray-900">📍 타임스탬프별 정리</h3>
              
              {generatedNote.sections?.map((section: any, index: number) => (
                <div key={index} className="border-l-4 border-blue-500 pl-6 py-4">
                  <h4 className="text-lg font-bold text-gray-900 mb-2">
                    📍 [{section.timeRange}] {section.title}
                  </h4>
                  
                  <div className="space-y-3">
                    <div>
                      <span className="font-semibold text-gray-700">핵심 내용:</span>
                      <p className="text-gray-600 mt-1">{section.content}</p>
                    </div>
                    
                    {section.keyConcepts && section.keyConcepts.length > 0 && (
                      <div>
                        <span className="font-semibold text-blue-700">💡 핵심 개념:</span>
                        <span className="text-blue-600 ml-2">{section.keyConcepts.join(', ')}</span>
                      </div>
                    )}
                    
                    {section.actionPoints && section.actionPoints.length > 0 && (
                      <div>
                        <span className="font-semibold text-green-700">⚡ 액션 포인트:</span>
                        <span className="text-green-600 ml-2">{section.actionPoints.join(', ')}</span>
                      </div>
                    )}
                  </div>
                </div>
              ))}
            </div>

            {/* Checklist */}
            <div className="mt-8 bg-gray-50 rounded-lg p-6">
              <h3 className="text-lg font-bold text-gray-900 mb-4">✅ 학습 체크리스트</h3>
              <div className="space-y-2">
                <label className="flex items-center">
                  <input type="checkbox" className="mr-3" />
                  <span>영상 시청 완료</span>
                </label>
                <label className="flex items-center">
                  <input type="checkbox" className="mr-3" />
                  <span>핵심 개념 이해</span>
                </label>
                <label className="flex items-center">
                  <input type="checkbox" className="mr-3" />
                  <span>액션 포인트 실행</span>
                </label>
                <label className="flex items-center">
                  <input type="checkbox" className="mr-3" />
                  <span>복습 완료</span>
                </label>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}